@page "/"

@inject IFormFactor FormFactor

<div class="mt-1 container">
    @if (hasAccess)
    {
        <div class="row">
            <a href="/transaction" class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon elevation-1" style="color: white; background-color: #6002ee">
                        <MudIcon Icon="@Icons.Material.Outlined.ProductionQuantityLimits" />
                    </span>
                    <div class="info-box-content">
                        <span class="info-box-text">TRANSECTION</span>
                        <span class="info-box-number">
                            <small>@vm.DayCount</small>
                        </span>
                    </div>
                </div>
            </a>

            <a href="/history" class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon elevation-1" style="color: white; background-color: #90ee02">
                        <MudIcon Icon="@Icons.Material.Outlined.History" />
                    </span>
                    <div class="info-box-content">
                        <span class="info-box-text">TRANSACTION HISTRY</span>
                        <span class="info-box-number">
                            <small>@vm.TotalCount</small>
                        </span>
                    </div>
                </div>
            </a>

            <a href="/products" class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon elevation-1" style="color: white; background-color: #021aee">
                        <MudIcon Icon="@Icons.Material.Outlined.ProductionQuantityLimits" />
                    </span>
                    <div class="info-box-content">
                        <span class="info-box-text">PRODUCTS</span>
                    </div>
                </div>
            </a>

            @if (isOwner)
            {
                <a href="/admin" class="col-12 col-sm-6 col-md-3">
                    <div class="info-box">
                        <span class="info-box-icon elevation-1" style="color: white; background-color: #d602ee">
                            <MudIcon Icon="@Icons.Material.Outlined.AdminPanelSettings" />
                        </span>
                        <div class="info-box-content">
                            <span class="info-box-text">ADMIN</span>
                        </div>
                    </div>
                </a>

                <a href="/users" class="col-12 col-sm-6 col-md-3">
                    <div class="info-box">
                        <span class="info-box-icon elevation-1" style="color: white; background-color: #33691E">
                            <MudIcon Icon="@Icons.Material.Outlined.VerifiedUser" />
                        </span>
                        <div class="info-box-content">
                            <span class="info-box-text">USERS</span>
                        </div>
                    </div>
                </a>

                <a href="/audit" class="col-12 col-sm-6 col-md-3">
                    <div class="info-box">
                        <span class="info-box-icon elevation-1" style="color: white; background-color: #ee6002">
                            <MudIcon Icon="@Icons.Material.Outlined.WorkHistory" />
                        </span>
                        <div class="info-box-content">
                            <span class="info-box-text">AUDIT TRAIL</span>
                        </div>
                    </div>
                </a>
            }
        </div>
    }
    else
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">
            Access to use this app hasn`t been granted yet.
        </MudAlert>
    }
</div>


@code {

    [Inject] AuthenticationStateProvider AuthStateProvider { get; set; }
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private CounterViewModel vm = new();
    @inject IHttpClientService HttpClientService;
    @inject ISnackbar Snackbar;
    private bool hasAccess = false;
    private bool isOwner = false;
    protected override async Task OnInitializedAsync()
    {
        var claims = await AuthStateProvider.GetAuthenticationStateAsync();
        hasAccess = claims.User.IsInRole("StoreEmployee") || claims.User.IsInRole("StoreOwner") || claims.User.IsInRole("Admin") ? true : false;
        isOwner = claims.User.IsInRole("StoreOwner") || claims.User.IsInRole("Admin") ? true : false;
        StateHasChanged();
        await LoadSales();
        await base.OnInitializedAsync();
    }

    private async Task LoadSales()
    {

        try
        {
            vm = await HttpClientService.GetAsync<CounterViewModel>($"api/sales/get_counter");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
