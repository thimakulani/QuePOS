@page "/audit/index"
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@code {
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
    new("Audit Trail", href: null, disabled: true),
    ];
}
<MudCard>
    <MudCardHeader >
        <MudText>Audit Trail Records</MudText>
        </MudCardHeader>
    <MudCardContent>
        <MudTable Items="AuditTrails" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>User</MudTh>
                <MudTh>Action</MudTh>
                <MudTh>Table</MudTh>
                <MudTh>Record ID</MudTh>
                <MudTh>Timestamp</MudTh>
                <MudTh>IP Address</MudTh>
                <MudTh>User Agent</MudTh>
            </HeaderContent>
            <RowTemplate Context="audit">
                <MudTd>@audit.Id</MudTd>
                <MudTd>@audit.ApplicationUser?.StoreUser?.FirstName</MudTd>
                <MudTd>@audit.Action</MudTd>
                <MudTd>@audit.TableName</MudTd>
                <MudTd>@audit.RecordId</MudTd>
                <MudTd>@audit.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
                <MudTd>@audit.IPAddress</MudTd>
                <MudTd>
                    <MudTooltip Text="@audit.UserAgent">
                        <MudText Truncate="true">@audit.UserAgent</MudText>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private List<AuditTrail> AuditTrails = new();
    @inject IHttpClientService HttpClient;
    @inject ISnackbar Snackbar;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuditTrails = await HttpClient.GetAsync<List<AuditTrail>>("/api/trails/store");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode != System.Net.HttpStatusCode.NotFound)
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }
}
