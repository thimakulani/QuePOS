@page "/order"
@using Microsoft.Extensions.Logging
@using MudBlazor

<MudPaper Elevation="4" Class="p-2">
    <div style="display: flex; justify-content: space-between">
        <MudText Style="margin: 0px" Typo="Typo.h6">Transaction</MudText>
        <a class="btn-sm btn btn-primary" href="/order_history">Order History</a>
    </div>
    <MudDivider Class="my-2" />
    <MudStack Class="mb-2" Row="true">
        <MudButton Variant="Variant.Outlined" OnClick="ShowScanner" StartIcon="@Icons.Material.Outlined.QrCodeScanner">Scan</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="ShowProducts" StartIcon="@Icons.Material.Outlined.Add">Get Products</MudButton>
    </MudStack>



    <MudDivider Class="my-2" />
    <MudText Color="Color.Dark" Typo="Typo.h6">Total: @totalAmount.ToString("C") (@cartItems.Sum(i => i.Quantity) items)</MudText>
    <MudStack Row="true">

        <MudSelect @bind-Value="selectedPaymentMethod" Label="Payment Method" Margin="Margin.Dense" Variant="Variant.Outlined">
            @foreach (var method in paymentMethods)
            {
                <MudSelectItem Value="@method">@method</MudSelectItem>
            }
        </MudSelect>
        @if (selectedPaymentMethod == PaymentType.Cash)
        {

            <MudNumericField @bind-Value="cashReceived" Immediate="true" Format="F1" Label="Cash Received" Margin="Margin.Dense" Variant="Variant.Outlined"
                             Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Money" />

        }

    </MudStack>

    <MudText Typo="Typo.h6">Change: @changeAmount.ToString("C")</MudText>

    @if (changeAmount < 0)
    {

        <MudText Color="Color.Error" Typo="Typo.body2">* Insufficient cash received</MudText>
    }


    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success" OnClick="() => confirmSaleDialog = true">
        Complete Sale
    </MudButton>
    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" OnClick="ClearCart">
        Clear Cart
    </MudButton>
    <!-- Cart Items -->

</MudPaper>
<MudList Dense T="string">
    <MudListSubheader>
        Products
    </MudListSubheader>
    @foreach (var item in cartItems)
    {

        <MudListItem>
            <MudPaper Elevation="3" Class="p-2">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="2">
                    <MudText Color="Color.Success" Typo="Typo.subtitle1">@item.Name</MudText>
                    <MudSpacer />

                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Outlined" OnClick="() => UpdateQuantity(item, item.Quantity - 1)" Disabled="item.Quantity <= 1 || item.Product.Unit == UnitOfMeasure.Gram || item.Product.Unit == UnitOfMeasure.Kilogram || item.Product.Unit == UnitOfMeasure.Liter" Size="Size.Small" />
                        <MudText>@item.Quantity @item.UnitOfMeasure</MudText>
                        <MudIconButton Disabled="@(item.UnitOfMeasure == UnitOfMeasure.Kilogram || item.UnitOfMeasure == UnitOfMeasure.Gram || item.UnitOfMeasure == UnitOfMeasure.Liter ? true : false)" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" OnClick="() => UpdateQuantity(item, item.Quantity + 1)" Size="Size.Small" />
                    </MudStack>

                    <MudText Align="Align.Right" Typo="Typo.subtitle1">@((item.Quantity * item.Price).ToString("C"))</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => RemoveItem(item)" Color="Color.Error" />
                </MudStack>
            </MudPaper>
        </MudListItem>
    }
</MudList>

<!-- Product Dialog -->
<MudDialog @bind-Visible="products_visible" Options="_dialogOptions">
    <TitleContent>Products</TitleContent>
    <DialogContent>

        <MudList T="string" ReadOnly="true" CheckBoxColor="MudBlazor.Color.Tertiary">
            <MudListSubheader>
                <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" @bind-Value="searchText" Label="Search by Name or Barcode" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
            </MudListSubheader>
            @foreach (var item in FilteredProducts)
            {
                <MudListItem>
                    <MudPaper Elevation="3" Class="p-2">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudText>@item.Name</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1" Color="Color.Secondary">@item.Price?.ToString("C") @(item.Unit == UnitOfMeasure.Gram || item.Unit == UnitOfMeasure.Gram ? GetUnitDisplay(item.Unit) : "") </MudText>
                            <MudIconButton Icon="@Icons.Material.Rounded.Add" OnClick="@(() => AddItemToCart(item))" Color="Color.Primary" Size="Size.Small" />
                        </MudStack>
                    </MudPaper>
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="CloseDlg">Close</MudButton>
    </DialogActions>
</MudDialog>

<!-- Confirmation Dialog -->
<MudDialog @bind-Visible="confirmSaleDialog">
    <TitleContent>Confirm Transaction</TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">Are you sure you want to complete this sale?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="() => confirmSaleDialog = false">Cancel</MudButton>
        @*  <MudButton Color="Color.Success" OnClick="ProcessSale">Confirm</MudButton> *@

        <MudButton Disabled="@processingSale" Variant="Variant.Filled" OnClick="ProcessSale" Color="Color.Success">
            @if (processingSale)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing..</MudText>
            }
            else
            {
                <MudText>Confirm</MudText>
            }
        </MudButton>




    </DialogActions>
</MudDialog>
<!-- Transaction Slip Dialog -->
<MudDialog @bind-Visible="showSlipDialog">
    <TitleContent>Transaction Slip</TitleContent>
    <DialogContent>
        <MudText Typo="Typo.h6">Transaction Date: @saleDate.ToString("F")</MudText>
        <MudDivider Class="my-2" />
        <MudList T="string">
            @foreach (var item in cartItems)
            {
                <MudListItem>
                    @(item.Product.Name + " - Quantity: " + @item.Quantity + " - Total: " + (item.Quantity * item.Price).ToString("C"))
                </MudListItem>
            }
        </MudList>
        <MudDivider Class="my-2" />
        <MudText Typo="Typo.body1">Payment Method: @selectedPaymentMethod</MudText>
        <MudText Typo="Typo.body1">Total Amount: @totalAmount.ToString("C")</MudText>
        @if (selectedPaymentMethod == PaymentType.Cash)
        {
            <MudText Typo="Typo.body1">Cash Received: @cashReceived?.ToString("C")</MudText>
            <MudText Typo="Typo.body1">Change: @changeAmount.ToString("C")</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="() => showSlipDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>
<!-- Weight dlg -->
<MudDialog @bind-Visible="showWeightDlg">
    <TitleContent>Enter Weight</TitleContent>
    <DialogContent>
        <MudNumericField @bind-Value="weight" Immediate="true" Format="F1" Label="Enter Weight" Margin="Margin.Dense" Variant="Variant.Outlined"
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.MonitorWeight" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="() => showWeightDlg = false">Close</MudButton>
        <MudButton Color="Color.Secondary" OnClick="() => { AddWeightItem(weightProduct); }">Add</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private decimal? weight;
    private List<Product> products = [];
    private List<OrderItems> cartItems = [];
    private List<PaymentType> paymentMethods = new() { PaymentType.Cash, PaymentType.Card };
    private PaymentType selectedPaymentMethod = PaymentType.Cash;
    private string searchText = string.Empty;
    private bool products_visible;
    private bool confirmSaleDialog;
    private bool showSlipDialog;
    private bool processingSale = false;
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private IFormFactor FormFactor { get; set; }
    [Inject] private IHttpClientService HttpClientService { get; set; }
    private decimal? cashReceived;
    //private double changeAmount => (double)cashReceived - totalAmount;
    private decimal changeAmount => cashReceived.HasValue ? cashReceived.Value - totalAmount : totalAmount;
    private DateTime saleDate;

    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    private decimal totalAmount => cartItems.Sum(i => i.Quantity * i.Price);

    private List<Product> FilteredProducts => products
        .Where(p => string.IsNullOrEmpty(searchText)
            || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)
            || p.BarCode.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private void CloseDlg() => products_visible = false;
    private string GetUnitDisplay(UnitOfMeasure unit)
    {
        return unit switch
        {
            UnitOfMeasure.Each => "each",
            UnitOfMeasure.Gram => "g",
            UnitOfMeasure.Kilogram => "kg",
            UnitOfMeasure.Liter => "L",
            UnitOfMeasure.Small => "small item",
            UnitOfMeasure.Medium => "medium item",
            UnitOfMeasure.Large => "large item",
            _ => unit.ToString().ToLower()
        };
    }

    private async void ShowScanner()
    {
        try
        {
            var result = await FormFactor.ShowBarCodeScanner();
            await GetProductByBarCode(result?.FirstOrDefault().Value);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task GetProductByBarCode(string barcode)
    {
        if (string.IsNullOrEmpty(barcode))
        {
            Snackbar.Add("Invalid barcode scanned", Severity.Warning);
            return;
        }

        try
        {
            var prod = await HttpClientService.GetAsync<Product>($"/api/products/scan/{barcode}");
            if (prod != null)
            {
                AddItemToCart(prod);
                Snackbar.Add($"Added {prod.Name} to cart", Severity.Success);
            }
            else
            {
                Snackbar.Add("Product not found", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
    }


    private void ShowProducts() => products_visible = true;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        try
        {
            products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    @inject ILogger<Index> logger;
    private bool showWeightDlg = false;
    private Product weightProduct = new Product();
    private void AddWeightItem(Product product)
    {
        try
        {
            if (weight.HasValue)
            {
                cartItems.Add(new OrderItems
                {
                    Name = product.Name,
                    ProductId = product.Id,
                    Quantity = 1,
                    Price = product.Price.Value * weight.Value,
                    UnitOfMeasure = product.Unit
                });
                showWeightDlg = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message, ex);
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }
    private void AddItemToCart(Product product)
    {
        try
        {

            if (product.Unit == UnitOfMeasure.Gram || product.Unit == UnitOfMeasure.Kilogram)
            {
                weightProduct = product;
                showWeightDlg = true;
            }
            else
            {
                var existingItem = cartItems.FirstOrDefault(i => i.Name == product.Name);
                if (existingItem != null) existingItem.Quantity++;
                else
                    cartItems.Add(new OrderItems { Name = product.Name, ProductId = product.Id, Quantity = 1, Price = product.Price.Value, UnitOfMeasure = product.Unit });
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message, ex);
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }
    private void UpdateQuantity(OrderItems item, int quantity)
    {
        // if(item.Product.Unit == UnitOfMeasure.Gram || item.Product.Unit == UnitOfMeasure.Kilogram)
        if (quantity > 0)
        {
            item.Quantity = quantity;
            StateHasChanged();
        }
    }

    private void RemoveItem(OrderItems item)
    {
        cartItems.Remove(item);
        StateHasChanged();
    }


    private void ClearCart()
    {
        cartItems.Clear();
        cashReceived = 0;
        StateHasChanged();
    }

    private async void ProcessSale()
    {
        processingSale = true;

        if (!cartItems.Any())
        {
            Snackbar.Add("No items in cart. Please add items before proceeding.", Severity.Warning);
            return;
        }

        if (selectedPaymentMethod == PaymentType.Cash)
        {
            if (!cashReceived.HasValue || cashReceived.Value < totalAmount)
            {
                Snackbar.Add("Insufficient cash received. Please enter a valid amount.", Severity.Warning);
                return;
            }
        }

        var sale = new Order
        {
            ChangeAmount = Math.Max(changeAmount, 0),
            CashReceived = selectedPaymentMethod == PaymentType.Card ? totalAmount : cashReceived,
            OrderDate = DateTime.Now,
            TotalAmount = totalAmount,
            PaymentType = selectedPaymentMethod,
            OrderItems = cartItems,
            OrderStatus = OrderStatus.Accepted,
            OrderType = OrderType.WalkIn,
            CustomerId = null

        };

        try
        {
            await HttpClientService.PostAsync<Order>("/api/order/add", sale);
            Snackbar.Add("Transaction was successful", Severity.Success);
            saleDate = DateTime.Now;
            //showSlipDialog = true;
            confirmSaleDialog = false;
            ClearCart();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Transaction failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            processingSale = false;
            StateHasChanged();
        }
    }

}
