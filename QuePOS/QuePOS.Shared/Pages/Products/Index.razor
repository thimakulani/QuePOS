@page "/products"
@using ZXing.Net.Maui
@inject IDialogService DialogService

<MudCardHeader>
    <MudTextField @bind-Value="_searchTerm" Placeholder="Search..." Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" />
    <MudButton Variant="Variant.Outlined" Style="margin-left:5px" Color="Color.Primary" OnClick="() => OpenEditDialog(new Product())">Add</MudButton>
</MudCardHeader>

<MudCardContent>
    <MudGrid>
        @foreach (var product in _filteredProducts)
        {
            <MudItem xs="12" sm="6" lg="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="d-flex align-center">
                        <MudAvatar Size="Size.Large">
                            @if (string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <MudIcon Icon="@Icons.Material.Outlined.BrokenImage" />
                            }
                            else
                            {
                                <img src="@product.ImageUrl.Replace("http://", "https://")" />
                            }
                        </MudAvatar>
                        <div>
                            <MudText Typo="Typo.h6">@product.Name</MudText>
                            <MudText Typo="Typo.body2">@product.Category</MudText>

                            @if (product.Discount > 0)
                            {
                                <MudText Typo="Typo.body1" Class="font-weight-bold text-decoration-line-through text-muted me-2">
                                    @product.Price?.ToString("C")
                                </MudText>
                                <MudText Typo="Typo.body1" Class="font-weight-bold text-success">
                                    @((product.Price * (1 - product.Discount / 100))?.ToString("C")) per @GetUnitDisplay(product.Unit)
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1" Class="font-weight-bold">
                                    @product.Price?.ToString("C") per @GetUnitDisplay(product.Unit)
                                </MudText>
                            }

                            @if (product.Unit == UnitOfMeasure.Each)
                            {

                                <MudText Typo="Typo.body2">
                                    Stock: @Math.Ceiling(@product.StockQuantity.Value)
                                </MudText>
                            }
                        </div>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Style="background-color: #2196F3; color:white" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => OpenEditDialog(product))">Edit</MudButton>
                        <MudButton Color="Color.Primary" Style="margin-left:5px" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => UpdateDiscount(product))">Discount(@product.Discount.ToString("#")%)</MudButton>
                        <MudButton Color="Color.Error" Style="margin-left:5px" Size="Size.Small" Variant="Variant.Filled" OnClick="@(() => ConfirmDelete(product.Id))">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (isLoading)
    {
        <div class="d-flex justify-center align-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Style="height: 70px; width: 70px;" Indeterminate="true" />
        </div>
    }
    else if (_filteredProducts.Count == 0)
    {
        <div class="d-flex justify-center align-center mt-5">
            <MudAlert Elevation="3" Icon="@Icons.Material.Outlined.HourglassEmpty" Severity="Severity.Info">No products found</MudAlert>
        </div>
    }
</MudCardContent>

<MudDialog @bind-Visible="_isDialogOpen" Options="_dialogOptions">
    <TitleContent>@(_product.Id == Guid.Empty ? "Add Product" : "Edit Product")</TitleContent>
    <DialogContent>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Bar Code" @bind-Value="_product.BarCode" AdornmentIcon="@Icons.Material.Outlined.QrCodeScanner" Adornment="Adornment.End" OnAdornmentClick="ScannBarCode" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Name" @bind-Value="_product.Name" Required="true" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Description" @bind-Value="_product.Description" Required="true" />
        <MudSelect T="UnitOfMeasure" @bind-Value="_product.Unit" Label="Unit of Measure" Variant="Variant.Outlined" Margin="Margin.Dense">
            @foreach (UnitOfMeasure unit in Enum.GetValues(typeof(UnitOfMeasure)))
            {
                <MudSelectItem Value="@unit">@unit</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField Variant="Variant.Outlined" Margin="Margin.Dense"
                         Label="@(_product.Unit == UnitOfMeasure.Each ? "Quantity" :
product.Unit == UnitOfMeasure.Large || _product.Unit == UnitOfMeasure.Medium || _product.Unit == UnitOfMeasure.Small ? "Size" : $"Weight ({GetUnitDisplay(_product.Unit)})")"
                         @bind-Value="_product.StockQuantity" Required="true" />
        <MudNumericField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Price" Format="F2" @bind-Value="_product.Price" Required="true" />

        <!-- 🆕 Unit of Measure Selector -->

        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Category" @bind-Value="categoryId">
            @if (categories.Count == 0)
            {
                <MudSelectItem Value="0">No Category</MudSelectItem>
            }
            @foreach (var item in categories)
            {
                <MudSelectItem Value="@item.Id">@item.CategoryName</MudSelectItem>
            }
        </MudSelect>
        <MudItem>
            <MudFileUpload @ref="_fileUpload" OnFilesChanged="OnFileSelectedChange" T="IBrowserFile" Accept="image/*" For="@(() => File)" @bind-Files="File">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Image</MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (!string.IsNullOrEmpty(selectedFile))
            {
                <MudAlert Variant="Variant.Filled" Severity="Severity.Success" ShowCloseIcon="true" Dense="true" CloseIconClicked="@(() => selectedFile = string.Empty)">
                    @File.Name.Substring(0, 10)
                </MudAlert>
            }
        </MudItem>
        <MudSwitch @bind-Value="_product.IsAvailableOnline" Size="Size.Medium" ThumbIcon="@(_product.IsAvailableOnline == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(_product.IsAvailableOnline == true ? Color.Success : Color.Error)">Available for Online Orders</MudSwitch>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="process" OnClick="SaveProduct" Variant="Variant.Outlined" Color="Color.Primary">
            @if (process)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Adding Product</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
        <MudButton OnClick="() => _isDialogOpen = false" Variant="Variant.Outlined" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>



<MudDialog @bind-Visible="discountDlg" Options="_dialogOptions">
    <TitleContent>@("Update Product Discount")</TitleContent>
    <DialogContent>
        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Category" @bind-Value="discount">
            @foreach (var item in discounts)
            {
                <MudSelectItem Value="@item">@($"{item}%")</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="process" OnClick="SaveUpdate" Variant="Variant.Outlined" Color="Color.Primary">
            @if (process)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Updating Discount</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
        <MudButton OnClick="() => discountDlg = false" Variant="Variant.Outlined" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>





@code {
    private bool discountDlg = false;
    private decimal discount = 0;
    private List<decimal> discounts = Enumerable.Range(0, 21).Select(x => x * 5m).ToList();
    private MudFileUpload<IBrowserFile> _fileUpload;
    private IBrowserFile File { get; set; }
    private bool isLoading = true;
    private bool process = false;
    private Guid categoryId;
    private List<Category> categories = new();
    private List<Product> _products = new();
    private string _searchTerm = "";
    private Product _product = new();
    private bool _isDialogOpen = false;
    private string selectedFile = "";
    private List<Product> _filteredProducts => _products
        .Where(p => string.IsNullOrEmpty(_searchTerm) || p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };

    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private IHttpClientService HttpClientService { get; set; }
    [Inject] private IFormFactor FormFactor { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private void OpenEditDialog(Product product)
    {
        _product = product.Id == Guid.Empty
            ? new Product()
            : new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                StockQuantity = product.StockQuantity,
                CategoryId = product.CategoryId,
                ImageUrl = product.ImageUrl,
                BarCode = product.BarCode,
                Unit = product.Unit,
                Discount = product.Discount

            };

        categoryId = _product.CategoryId.HasValue ? _product.CategoryId.Value : categories[0].Id;
        _isDialogOpen = true;
    }

    private async Task ScannBarCode()
    {
        try
        {
            var results = await FormFactor.ShowBarCodeScanner();
            var code = results.FirstOrDefault()?.Value;
            if (!string.IsNullOrEmpty(code))
            {
                Snackbar.Add(code, Severity.Success);
                _product.BarCode = code;
                await SearchProduct(code);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Scan failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task SearchProduct(string barcode)
    {
        try
        {
            var _productItem = await HttpClientService.GetAsync<ProductItems>($"/api/ProductItems/scan/{barcode}");
            _product.Description = _productItem.Desc_sourced;
            _product.Name = _productItem.Brn;
            var cat = categories.FirstOrDefault(x => x.CategoryName == _productItem.Cat);
            if (cat != null) categoryId = cat.Id;
        }
        catch (HttpRequestException ex) when (ex.StatusCode != System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add($"HTTP Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return Convert.ToBase64String(memoryStream.ToArray());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshProducts();
            await GetCategories();
        }
    }

    private async Task SaveProduct()
    {
        try
        {
            process = true;
            if (!string.IsNullOrEmpty(selectedFile))
                _product.Base64Url = selectedFile;

            _product.CategoryId = categoryId;

            if (_product.Id == Guid.Empty)
            {
                var product = await HttpClientService.PostAsync<Product>("/api/products", _product);
                _products.Add(product);
                Snackbar.Add("Product added", Severity.Success);
            }
            else
            {
                var prod = await HttpClientService.PutAsync<Product>($"/api/products/update/{_product.Id}", _product);
                for (int i = 0; i < _products.Count; i++)
                {
                    if (_products[i].Id == prod.Id)
                    {
                        _products[i] = prod;
                        break;
                    }
                }
                Snackbar.Add("Product updated", Severity.Success);
            }

            // await RefreshProducts();
            _isDialogOpen = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Save error: {ex.Message}", Severity.Error);
        }
        finally
        {
            process = false;
        }
    }
    private void UpdateDiscount(Product product)
    {
        discount = product.Discount;
        _product = product;
        discountDlg = true;
    }
    private async Task ConfirmDelete(Guid id)
    {
        var confirm = await DialogService.ShowMessageBox("Confirm", "Are you sure you want to delete this product?", "Yes", "No");
        if (confirm == true)
        {
            try
            {
                await HttpClientService.DeleteAsync($"/api/products/{id}");
                _products.RemoveAll(p => p.Id == id);
                Snackbar.Add("Product deleted", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Delete error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RefreshProducts()
    {
        try
        {
            isLoading = true;
            _products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private string GetUnitDisplay(UnitOfMeasure unit)
    {
        return unit switch
        {
            UnitOfMeasure.Each => "each",
            UnitOfMeasure.Gram => "g",
            UnitOfMeasure.Kilogram => "kg",
            UnitOfMeasure.Liter => "L",
            UnitOfMeasure.Small => "small item",
            UnitOfMeasure.Medium => "medium item",
            UnitOfMeasure.Large => "large item",
            _ => unit.ToString().ToLower()
        };
    }


    private async Task GetCategories()
    {
        try
        {
            categories = await HttpClientService.GetAsync<List<Category>>("/api/category");
            if (categories.Count > 0)
                categoryId = categories[0].Id;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Category fetch error: {ex.Message}", Severity.Error);
        }
    }
    private async Task SaveUpdate(MouseEventArgs args)
    {
        _product.Discount = discount;
        try
        {
            process = true;
            if (_product.Id != Guid.Empty)
            {
                var prod = await HttpClientService.PutAsync<Product>($"/api/products/update/{_product.Id}", _product);
                for (int i = 0; i < _products.Count; i++)
                {
                    if (_products[i].Id == prod.Id)
                    {
                        _products[i] = prod;
                        break;
                    }
                }
                Snackbar.Add("Product discount updated", Severity.Success);
            }

            // await RefreshProducts();
            discountDlg = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Save error: {ex.Message}", Severity.Error);
        }
        finally
        {
            process = false;
        }
    }
    private async void OnFileSelectedChange(InputFileChangeEventArgs args)
    {
        File = args.File;
        if (File != null)
        {
            selectedFile = await ConvertFileToBase64(File);
            StateHasChanged();
        }
    }
}
