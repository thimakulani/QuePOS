@page "/products/index"
@inject IDialogService DialogService
<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Products</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchTerm" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" Variant="Variant.Outlined" Immediate="true" />
        <MudButton Color="Color.Primary" OnClick="()=> OpenEditDialog(new Product())">Add Product</MudButton>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="_filteredProducts" Dense Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Stock Quantity</MudTh>
                <MudTh>Category</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Price">@context.Price.ToString("C")</MudTd>
                <MudTd DataLabel="Stock Quantity">@context.StockQuantity</MudTd>
                <MudTd DataLabel="Category">@context.Category?.CategoryName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Color="Color.Primary" OnClick="@(() => OpenEditDialog(context))">Edit</MudButton>
                    <MudButton Color="Color.Error" OnClick="@(() => ConfirmDelete(context.Id))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

<MudDialog @bind-Visible="_isDialogOpen">
    <TitleContent>@(_product.Id == 0 ? "Add Product" : "Edit Product")</TitleContent>
    <DialogContent>
        <MudTextField Label="Name" @bind-Value="_product.Name" Required="true" />
        <MudTextField Label="Description" @bind-Value="_product.Description" Required="true" />
        <MudTextField Label="Price" @bind-Value="_product.Price" Required="true" />
        <MudTextField Label="Stock Quantity" @bind-Value="_product.StockQuantity" Required="true" />
        <MudSelect Label="Category" @bind-Value="_product.CategoryID">
            <MudSelectItem Value="1">Category 1</MudSelectItem>
            <MudSelectItem Value="2">Category 2</MudSelectItem>
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SaveProduct" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="() => _isDialogOpen = false" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _processing = true;
    @inject ISnackbar Snackbar;
    [Inject]
    private IHttpClientService HttpClientService { get; set; }
    private List<Product> _products = new();
    private List<Product> _filteredProducts => _products.Where(p => string.IsNullOrEmpty(_searchTerm) || p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private string _searchTerm = "";

    private Product _product = new();
    private bool _isDialogOpen = false;
    private void OpenEditDialog(Product product)
    {
        _product = product.Id == 0 ? new Product() : new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                StockQuantity = product.StockQuantity,
                CategoryID = product.CategoryID
            };
        _isDialogOpen = true;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP-specific exceptions
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            // Handle other unexpected exceptions
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }



    private async Task SaveProduct()
    {
        if (_product.Id == 0)
            await HttpClientService.PostAsync<Product>("/api/products", _product);
        else
            await HttpClientService.PutAsync<Product>($"/api/products/{_product.Id}", _product);

        await RefreshProducts();
        _isDialogOpen = false;
    }

    private async Task ConfirmDelete(int id)
    {
        var confirm = await DialogService.ShowMessageBox("Confirm", "Are you sure you want to delete this product?", "Yes", "No");
        if (confirm == true)
        {
            await HttpClientService.DeleteAsync($"/api/products/{id}");
            await RefreshProducts();
        }
    }

    private async Task RefreshProducts()
    {

        try
        {
            _products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP-specific exceptions
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            // Handle other unexpected exceptions
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

}



