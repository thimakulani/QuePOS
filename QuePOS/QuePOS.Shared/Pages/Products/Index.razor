@page "/products/index"
@inject IDialogService DialogService

<MudCardHeader>
    <MudTextField @bind-Value="_searchTerm" Placeholder="Search..." Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" />
    <MudButton Color="Color.Primary" OnClick="()=> OpenEditDialog(new Product())">Add Product</MudButton>
</MudCardHeader>
<MudCardContent>
    <MudGrid>
        @foreach (var product in _filteredProducts)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard>
                    <MudCardContent Class="d-flex align-center">
                        <MudAvatar Size="Size.Large" Image="@product.Name" Alt="Product Image" Class="mr-2" />
                        <div>
                            <MudText Typo="Typo.h6">@product.Name</MudText>
                            <MudText Typo="Typo.body1" Class="font-weight-bold">@product.Price.ToString("C")</MudText>
                            <MudText Typo="Typo.body2">Stock: @product.StockQuantity</MudText>
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" OnClick="@(() => OpenEditDialog(product))">Edit</MudButton>
                        <MudButton Color="Color.Error" OnClick="@(() => ConfirmDelete(product.Id))">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudCardContent>

<MudDialog @bind-Visible="_isDialogOpen" Options="this._dialogOptions">
    <TitleContent>@(_product.Id == 0 ? "Add Product" : "Edit Product")</TitleContent>
    <DialogContent>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Name" @bind-Value="_product.Name" Required="true" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Description" @bind-Value="_product.Description" Required="true" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Price" @bind-Value="_product.Price" Required="true" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Stock Quantity" @bind-Value="_product.StockQuantity" Required="true" />
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Image URL" @bind-Value="_product.Name" Required="true" />
        <MudItem>
            <MudFileUpload @ref="@_fileUpload"
                           T="IBrowserFile"
                           For="@(() => File)"
                           @bind-Files="File"
                           >
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>
        
        <MudSelect Label="Category" @bind-Value="categoryId">
            @foreach (var item in categories)
            {
                <MudSelectItem value="@item.Id">
                    @item.CategoryName
                </MudSelectItem>
            }
        </MudSelect>
    
       
    </DialogContent> 
    <DialogActions>
        <MudButton OnClick="SaveProduct" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="() => _isDialogOpen = false" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudFileUpload<IBrowserFile> _fileUpload;
    private bool _processing = true;
    private object Image;
    private int categoryId;
    @inject ISnackbar Snackbar;
    private List<Category> categories = [];
    [Inject]
    private IHttpClientService HttpClientService { get; set; }
    private List<Product> _products = new();
    private List<Product> _filteredProducts => _products.Where(p => string.IsNullOrEmpty(_searchTerm) || p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private string _searchTerm = "";
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    private Product _product = new();
    private bool _isDialogOpen = false;
    private IBrowserFile File { get; set; }
    private void OpenEditDialog(Product product)
    {
        _product = product.Id == 0 ? new Product() : new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                StockQuantity = product.StockQuantity,
                CategoryID = product.CategoryID,
                ImageUrl = product.ImageUrl
            };
        _isDialogOpen = true;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
        await base.OnInitializedAsync();
    }
    private async Task SaveProduct()
    {
        if (_product.Id == 0)
            await HttpClientService.PostAsync<Product>("/api/products", _product);
        else
            await HttpClientService.PutAsync<Product>($"/api/products/{_product.Id}", _product);

        await RefreshProducts();
        _isDialogOpen = false;
    }
    private async Task ConfirmDelete(int id)
    {
        var confirm = await DialogService.ShowMessageBox("Confirm", "Are you sure you want to delete this product?", "Yes", "No");
        if (confirm == true)
        {
            await HttpClientService.DeleteAsync($"/api/products/{id}");
            await RefreshProducts();
        }
    }
    private async Task RefreshProducts()
    {
        try
        {
            _products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }
    private async Task GetCategories()
    {
        try
        {
            categories = await HttpClientService.GetAsync<List<Category>>("/api/category");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }
}
