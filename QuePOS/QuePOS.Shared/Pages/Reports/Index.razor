@page "/reports"

@using ApexCharts
@inject IHttpClientService HttpClientService

@* <MudBreadcrumbs Items="_items"></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
    new("Reports", href: null, disabled: true),
    ];
} *@
<MudContainer Style="height: 100%">

    <MudTabs Elevation="2" Rounded="true" style="height: 80vh" Color="MudBlazor.Color.Primary">
        <MudTabPanel Icon="@Icons.Material.Filled.Api" Text="Total Sales" BadgeColor="MudBlazor.Color.Error">
            @if (loading)
            {
                <div class="d-flex align-center justify-center" style="height: 200px;">
                    <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Medium" Rounded="true" />
                </div>
            }
            else
            {
                @if (WeeklySalesData.Any())
                {
                    <QuePOS.Shared.Pages.Reports.Components.WeekelyCharts Sales="@WeeklySalesData" />
                }
                else
                {
                    <MudContainer Class="d-flex align-center justify-center">
                        <MudText>No Data At The Moment</MudText>
                    </MudContainer>
                }
            }
        </MudTabPanel>
        <MudTabPanel Icon="@Icons.Material.Filled.Build" Text="Payment Types" BadgeData="1" BadgeColor="MudBlazor.Color.Success" />
    </MudTabs>
</MudContainer>

@code {
    private List<Order> WeeklySalesData = [];
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSalesData();
    }

    private async Task LoadSalesData()
    {
        try
        {
            var allSales = await GetSalesAsync();
            var startOfWeek = GetStartOfWeek(DateTime.Now);
            var endOfWeek = GetEndOfWeek(DateTime.Now);

            // Create a dictionary with all days of the current week initialized to zero sales
            var weekData = Enumerable.Range(0, 7)
                .Select(i => new Order
                {
                    OrderDate = startOfWeek.AddDays(i),
                    TotalAmount = 0 // Default sales amount is 0
                })
                .ToDictionary(s => s.OrderDate.Date);

            // Map actual sales data to the correct days
            foreach (var sale in allSales.Where(s => s.OrderDate.Date >= startOfWeek && s.OrderDate.Date <= endOfWeek))
            {
                if (weekData.ContainsKey(sale.OrderDate.Date))
                {
                    weekData[sale.OrderDate.Date].TotalAmount += sale.TotalAmount;
                }
            }

            // Convert dictionary back to list for UI display
            WeeklySalesData = weekData.Values.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading order data: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private DateTime GetStartOfWeek(DateTime date) => date.Date.AddDays(-(int)date.DayOfWeek);

    private DateTime GetEndOfWeek(DateTime date) => GetStartOfWeek(date).AddDays(6);

    private async Task<List<Order>> GetSalesAsync()
    {
        try
        {
            return await HttpClientService.GetAsync<List<Order>>("api/order/get_history") ?? new List<Order>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching sales data: {ex.Message}");
            return [];
        }
    }
}
