@page "/reports/index"

@using ApexCharts
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@code {
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
    new("Reports", href: null, disabled: true),
    ];
}
<h3>Sales Report</h3>

<MudTabs Elevation="2" Rounded="true" Centered="true" Class="my-6" Color="MudBlazor.Color.Dark">
    <MudTabPanel Icon="@Icons.Material.Filled.Api" Text="Total Sales" BadgeColor="MudBlazor.Color.Error">
        @if (loading)
        {
            <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Medium" Rounded="true" />
        }
        else
        {
            @if (Sales.Count > 0)
            {
                <QuePOS.Shared.Pages.Reports.Components.WeekelyCharts Sales="@Sales" />
            }
            else
            {
                <div class="justify-content-center">
                    <MudText>No Data At The Moment</MudText>
                </div>
            }
        }


    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.Build" Text="Payment Types" BadgeData="1" BadgeColor="MudBlazor.Color.Success" />
    <MudTabPanel Icon="@Icons.Material.Filled.BugReport" Text="Bugs" BadgeData="0" />
    <MudTabPanel Icon="@Icons.Material.Filled.AccessTime" Text="Timing" BadgeDot="true" BadgeColor="MudBlazor.Color.Error" />
    <MudTabPanel Icon="@Icons.Material.Filled.InsertChartOutlined" Text="Metrics" BadgeIcon="@Icons.Material.Filled.Downloading" />
</MudTabs>



@code {
    private List<Sale> Sales = new();
    @inject IHttpClientService HttpClientService;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {

        Sales = (await GetSalesAsync())
            .Where(s => s.SaleDate.Date >= GetStartOfWeek(DateTime.Now) && s.SaleDate.Date <= GetEndOfWeek(DateTime.Now))
            .ToList();
        loading = false;
        StateHasChanged();
    }
    private DateTime GetStartOfWeek(DateTime date)
    {
        int diff = (7 + (date.DayOfWeek - DayOfWeek.Sunday)) % 7;
        return date.AddDays(-diff).Date;
    }

    private DateTime GetEndOfWeek(DateTime date)
    {
        return GetStartOfWeek(date).AddDays(6);
    }
    private async Task<List<Sale>> GetSalesAsync()
    {
        return await HttpClientService.GetAsync<List<Sale>>("api/sales/get_history");
    }
}
