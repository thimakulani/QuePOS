@page "/transaction/index"

@using MudBlazor

<MudGrid>
    <MudItem xs="12" sm="8" md="2" lg="6">
        <MudPaper Elevation="4" Class="p-2">
            <MudText Style="margin: 10px" Typo="Typo.h5">Transaction</MudText>
            <br />
            <MudGrid Class="mb-2" Justify="Justify.SpaceAround">
                <MudButton Variant="Variant.Outlined" OnClick="ShowScanner" StartIcon="@Icons.Material.Outlined.QrCodeScanner">Scan </MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="ShowProducts" StartIcon="@Icons.Material.Outlined.Add">Get Products</MudButton>
            </MudGrid>
            <MudList Dense T="string" Class="mt-2">
                @foreach (var item in cartItems)
                {
                    <MudListItem>
                        <MudPaper Elevation="3" Class="p-2">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="2">
                                <!-- Item Name -->
                                <MudText Color="Color.Success" Typo="Typo.subtitle1">@item.Name</MudText>
                                <MudSpacer />
                                <!-- Quantity Stepper -->
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Outlined" OnClick="() => UpdateQuantity(item, item.Quantity - 1)" Disabled="item.Quantity <= 1" Size="Size.Small" />
                                    <MudText>@item.Quantity</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" OnClick="() => UpdateQuantity(item, item.Quantity + 1)" Size="Size.Small" />
                                </MudStack>

                                <!-- Total Price -->
                                <MudText Align="Align.Right" Typo="Typo.subtitle1">@((item.Quantity * item.Price).ToString("C"))</MudText>
                                <!-- Remove Item Button -->
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => RemoveItem(item)" Color="Color.Error" />
                            </MudStack>
                        </MudPaper>
                    </MudListItem>
                }
            </MudList>



            <MudDivider Class="my-2" />
            <MudText Typo="Typo.h6">Total: @totalAmount.ToString("C")</MudText>

            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-2" OnClick="ProcessSale">Complete Sale</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>


<MudDialog @bind-Visible="products_visible" Options="_dialogOptions">
    <TitleContent>
        Products
    </TitleContent>
    <DialogContent>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="searchText" Label="Search by Name or Barcode" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudItem>

            <MudList T="string" ReadOnly="true" CheckBoxColor="MudBlazor.Color.Tertiary">
                @foreach (var item in FilteredProducts)
                {
                    <MudListItem Class="p-2">
                        <MudPaper Elevation="3" Class="p-2">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudText Typo="Typo.h6">@item.Name</MudText>
                                <MudSpacer />
                                <MudText Typo="Typo.body1" Color="Color.Secondary">@item.Price?.ToString("C")</MudText>
                                <MudIconButton Icon="@Icons.Material.Rounded.Add"
                                               OnClick="@(() => AddItemToCart(item))"
                                               Color="Color.Primary"
                                               Size="Size.Small" />
                            </MudStack>
                        </MudPaper>
                    </MudListItem>
                }
            </MudList>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="CloseDlg">Close</MudButton>
    </DialogActions>
</MudDialog>






@code {
    private List<Product> products = [];
    private List<Product> filteredProducts = new();
    @inject ISnackbar Snackbar;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    private bool products_visible;
    [Inject]
    private IHttpClientService HttpClientService { get; set; }
    private List<SaleDetail> cartItems = [];
    private double totalAmount => cartItems.Sum(i => i.Quantity * i.Price);
    private string searchText = string.Empty;
    private List<Product> FilteredProducts => products.Where(p => string.IsNullOrEmpty(searchText) || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
    /* private Task<IEnumerable<string>> SearchProducts(string value, CancellationToken cancellationToken)
         {
         return Task.FromResult(products
             .Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
             .Select(p => p.Name));
     }*/
    private void CloseDlg()
    {
        products_visible = false;
    }
    private void ShowScanner()
    {

    }
    private void ShowProducts()
    {
        products_visible = true;
    }
    protected override async Task OnInitializedAsync()
    {

        await GetProducts();
        await base.OnInitializedAsync();
    }
    private void AddToCart(string productName)
    {
        var product = products.FirstOrDefault(p => p.Name == productName);
        if (product != null)
        {
            var existingItem = cartItems.FirstOrDefault(i => i.Name == product.Name);
            if (existingItem != null)
            {
                existingItem.Quantity++;
            }
            else
            {
                cartItems.Add(new SaleDetail { Name = product.Name, ProductID = product.Id, Quantity = 1, Price = (double)product.Price });
            }
        }
    }
    private void AddItemToCart(Product product)
    {
        //var product = products.FirstOrDefault(p => p.Name == productName);
        if (product != null)
        {
            var existingItem = cartItems.FirstOrDefault(i => i.Name == product.Name);
            if (existingItem != null)
            {
                existingItem.Quantity++;
            }
            else
            {
                cartItems.Add(new SaleDetail { Name = product.Name, ProductID = product.Id, Quantity = 1, Price = (double)product.Price });
            }
        }
    }

    private void UpdateQuantity(SaleDetail item, int quantity)
    {
        item.Quantity = quantity;
    }

    private void RemoveItem(SaleDetail item)
    {
        cartItems.Remove(item);
    }

    private async void ProcessSale()
    {
        try
        {
            if (cartItems.Count == 0)
            {
                Snackbar.Add($"Select Items", Severity.Warning);
                return;
            }
            Sale sale = new Sale()
                {
                    SaleDate = DateTime.Now,
                    TotalAmount = (decimal)totalAmount,
                    SaleDetails = cartItems,

                };
            await HttpClientService.PostAsync<Sale>("/api/sales/add", sale);
            cartItems.Clear();
            Snackbar.Add($"Transaction was successful", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }

    }
    private async Task GetProducts()
    {
        try
        {
            //string id = FormFactor.GetSession()
            products = await HttpClientService.GetAsync<List<Product>>("/api/products/all/store");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }



}
