@page "/history"

<div style="display: flex; justify-content: space-between">
    <MudText Style="margin: 0px" Typo="Typo.h6">History</MudText>
    <a class="btn-sm btn btn-primary" href="/transaction">Transaction</a>
</div>
<br />
<MudStack Row="true" Spacing="2" Justify="Justify.SpaceAround">
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="Start Date" @bind-Date="startDate" Disabled="true" />
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="End Date" @bind-Date="endDate" Disabled="true" />
    <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Outlined.Search" Size="Size.Small" Color="Color.Primary" OnClick="LoadSales" />
</MudStack>

<MudTable Items="sales" Dense="true">
    <HeaderContent>
        <MudTh>Transaction Id</MudTh>
        <MudTh>User</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total Amount</MudTh>
        <MudTh>Products</MudTh>
        <MudTh>Slip</MudTh>
    </HeaderContent>
    <RowTemplate Context="sale">
        <MudTd DataLabel="Transaction Id">@sale.Id</MudTd>
        <MudTd DataLabel="User">@sale.User.FirstName</MudTd>
        <MudTd DataLabel="Date">@sale.SaleDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Quantity">@sale.SaleDetails.Count()</MudTd>
        <MudTd DataLabel="Total Amount">@sale.TotalAmount.ToString("C")</MudTd>
        <MudTd DataLabel="Products">
            <MudIconButton Edge="Edge.End" Size="Size.Small" OnClick="() => {sale.ShowDetails = !sale.ShowDetails;}" Icon="@Icons.Material.Filled.Preview" Variant="Variant.Outlined" />
        </MudTd>
        <MudTd DataLabel="Slip">
            <MudIconButton Edge="Edge.End" Size="Size.Small" Icon="@Icons.Material.Filled.Print" Variant="Variant.Outlined" />
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="7">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Transaction Details for <strong>@context.Id</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.SaleDetails" Context="_context" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <HeaderContent>
                                    <MudTh>Product Name</MudTh>
                                    <MudTh>Quantity</MudTh>
                                    <MudTh>Price</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Product Name">@_context.Product.Name</MudTd>
                                    <MudTd DataLabel="Quantity">@_context.Quantity</MudTd>
                                    <MudTd DataLabel="Price">@_context.Price.ToString("C")</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>

</MudTable>

@code {

    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private List<Sale> sales = new();
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    [Inject] IHttpClientService HttpClientService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
        await base.OnInitializedAsync();
    }

    private void ShowBtnPress(int nr)
    {
        sales.First(f => f.Id == nr).ShowDetails = !sales.First(f => f.Id == nr).ShowDetails;
        StateHasChanged();
    }

    private async Task LoadSales()
    {
        try
        {
            sales = await HttpClientService.GetAsync<List<Sale>>($"api/sales/get_history");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
