@page "/transaction/history"

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@code {
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
    new("Transaction History", href: null, disabled: true),
    ];
}

<MudStack Row="true" Spacing="2" Justify="Justify.SpaceAround">
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="Start Date" @bind-Date="startDate" Disabled="true" />
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="End Date" @bind-Date="endDate" Disabled="true" />
    <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Outlined.Search" Size="Size.Small" Color="Color.Primary" OnClick="LoadSales" />
</MudStack>


<MudTable Items="sales" Dense="true">
    <HeaderContent>
        <MudTh>Transaction Id</MudTh>
        <MudTh>User</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total Amount</MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate Context="sale">
        <MudTd DataLabel="Transaction Id">@sale.Id</MudTd>
        <MudTd DataLabel="User">@sale.User.FirstName</MudTd>
        <MudTd DataLabel="Date">@sale.SaleDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Quantity">@sale.SaleDetails.Count()</MudTd>
        <MudTd DataLabel="Total Amount">@sale.TotalAmount.ToString("C")</MudTd>
        <MudTd DataLabel="Products">
            <MudIconButton Edge="Edge.End" Size="Size.Small" Icon="@Icons.Material.Filled.Preview" Variant="Variant.Outlined" />
        </MudTd>
    </RowTemplate> 
    @* <ChildRowContent>
        @if (context.SaleDetails.Any())
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Transaction Details for <strong>@context.Id</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.SaleDetails" Context="AddressContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col />
                                    <col />
                                    <col style="width:200px;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Product Name</MudTh>
                                    <MudTh>Price</MudTh>
                                    <MudTh>Quantity</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Product Nmae">@AddressContext.Product.Name</MudTd>
                                    <MudTd DataLabel="Address Line 2">@AddressContext.Product.Name</MudTd>
                                    <MudTd DataLabel="Postal Code">@AddressContext.Product.Name</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent> *@

</MudTable>

@code {

    private string selectedFilter = "Daily";
    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private List<Sale> sales = new();
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    @inject IHttpClientService HttpClientService;
    @inject ISnackbar Snackbar;
    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
        await base.OnInitializedAsync();
    }
    private void ShowBtnPress(int nr)
    {
        // Person tmpPerson = People.First(f => f.Number == nr);
        // tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }
    private async Task LoadSales()
    {
        /*
         *
        FilterViewModel filter = new()
             {
                 StartDate = startDate,
                 EndDate = endDate,
             };
         */
        try
        {
            sales = await HttpClientService.GetAsync<List<Sale>>($"api/sales/get_history");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
