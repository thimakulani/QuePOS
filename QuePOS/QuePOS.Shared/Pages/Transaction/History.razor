@page "/history"

<div style="display: flex; justify-content: space-between">
    <MudText Style="margin: 0px" Typo="Typo.h6">History</MudText>
    <a class="btn-sm btn btn-primary" href="/transaction">Transaction</a>
</div>
<br />
<MudStack Row="true" Spacing="2" Justify="Justify.SpaceAround">
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="Start Date" @bind-Date="startDate" Disabled="true" />
    <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="End Date" @bind-Date="endDate" Disabled="true" />
    <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Outlined.Search" Size="Size.Small" Color="Color.Primary" OnClick="LoadSales" />
</MudStack>

<MudTable Items="sales" Dense="true">
    <HeaderContent>
        <MudTh>Transaction Id</MudTh>
        <MudTh>User</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total Amount</MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate Context="sale">
        <MudTd DataLabel="Transaction Id">@sale.Id</MudTd>
        <MudTd DataLabel="User">@sale.User.FirstName</MudTd>
        <MudTd DataLabel="Date">@sale.SaleDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Quantity">@sale.SaleDetails.Count()</MudTd>
        <MudTd DataLabel="Total Amount">@sale.TotalAmount.ToString("C")</MudTd>

        <MudTd DataLabel="Slip">
            <MudIconButton Edge="Edge.End" Size="Size.Small" OnClick="()=>ShowSlipDialog(sale)" Icon="@Icons.Material.Filled.Print" Variant="Variant.Outlined" />
        </MudTd>
    </RowTemplate>


</MudTable>
<!-- Transaction Slip Dialog -->
<MudDialog @bind-Visible="showSlipDialog">
    <TitleContent>Transaction Slip</TitleContent>
    <DialogContent>
        <MudText Typo="Typo.h6">Transaction Date: @_sale.SaleDate.ToString("F")</MudText>
        <MudDivider Class="my-2" />
        <MudList T="string">
            @foreach (var item in _sale.SaleDetails)
            {
                <MudListItem>
                    @item.Name - Quantity: @item.Quantity - Total: @(item.Quantity * item.Price).ToString("C")
                </MudListItem>
            }
        </MudList>
        <MudDivider Class="my-2" />
        <MudText Typo="Typo.body1">Payment Method: @_sale.PaymentType</MudText>
        <MudText Typo="Typo.body1">Total Amount: @_sale.TotalAmount.ToString("C")</MudText>
        @if (_sale.PaymentType == "Cash")
        {
            <MudText Typo="Typo.body1">Cash Received: @_sale.CashReceived?.ToString("C")</MudText>
            <MudText Typo="Typo.body1">Change: @_sale.ChangeAmount?.ToString("C")</MudText>
        }
    </DialogContent>
    <DialogActions>
        
        <MudButton Color="Color.Primary" OnClick="() => showSlipDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {

    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private List<Sale> sales = new();
    private Sale _sale = new();
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    [Inject] IHttpClientService HttpClientService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private bool showSlipDialog;
    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
        await base.OnInitializedAsync();
    }
    private void ShowSlipDialog(Sale sale)
    {
        _sale = sale;
    }

    private async Task LoadSales()
    {
        try
        {
            sales = await HttpClientService.GetAsync<List<Sale>>($"api/sales/get_history");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
