@page "/transaction/history"

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
@code {
    private List<BreadcrumbItem> _items =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
    new("Transaction History", href: null, disabled: true),
    ];
}
<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="4" class="d-flex align-center">
                <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="Start Date" @bind-Date="startDate" Disabled="true" />
                <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="End Date" @bind-Date="endDate" Disabled="true" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadSales">Apply Filter</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudTable Items="sales" Dense="true">
    <HeaderContent>
        <MudTh>Transaction Id</MudTh>
        <MudTh>User</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total Amount</MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate Context="sale">
        <MudTd DataLabel="Transaction Id">@sale.Id</MudTd>
        <MudTd DataLabel="User">@sale.User.FirstName</MudTd>
        <MudTd DataLabel="Date">@sale.SaleDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Quantity">@sale.SaleDetails.Count()</MudTd>
        <MudTd DataLabel="Total Amount">@sale.TotalAmount.ToString("C")</MudTd>
        <MudTd DataLabel="Products">@sale.TotalAmount.ToString("C")</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.SaleDetails.Any())
        {

        }
    </ChildRowContent>

</MudTable>

@code {

    private string selectedFilter = "Daily";
    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private List<Sale> sales = new();
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
    @inject IHttpClientService HttpClientService;
    @inject ISnackbar Snackbar;
    protected override async Task OnInitializedAsync()
    {
        await LoadSales();
        await base.OnInitializedAsync();
    }

    private async Task LoadSales()
    {
        /*
         *
        FilterViewModel filter = new()
             {
                 StartDate = startDate,
                 EndDate = endDate,
             };
         */
        try
        {
            sales = await HttpClientService.GetAsync<List<Sale>>($"api/sales/get_history");
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
