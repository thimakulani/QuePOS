@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@using Microsoft.Extensions.Localization
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <MudAppBar style="background-color: #2196F3">
            <MudText> @($"STORE: ") @store?.StoreName  </MudText>
            <MudSpacer />
            <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="@("Lang")">
                <MudSelectItem Value="@("en")">English</MudSelectItem>
                <MudSelectItem Value="@("fr")">Français</MudSelectItem>
                <MudSelectItem Value="@("pt")">Português</MudSelectItem>
            </MudSelect>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="Logout" Color="Color.Inherit" />
        </MudAppBar>
    </AuthorizeView>

    <AuthorizeView>
        <Authorized>
            <MudMainContent>
                <MudBreadcrumbs Items="@breadcrumbs"></MudBreadcrumbs>

                <div style="padding: 8px;">
                    @Body
                </div>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            @if (!session_loading)
            {
                <QuePOS.Shared.Pages.Login.Login />
            }
            else
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="Color.Primary" Style="height: 70px; width: 70px;" Indeterminate="true" />
                </div>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    //@inject IStringLocalizer<AppResources> Localizer
    [Inject] AuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IUserService IUserService { get; set; }
    [Inject] IFormFactor FormFactor { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IHttpClientService HttpClientService { get; set; }

    private List<BreadcrumbItem> breadcrumbs = new();
    private bool _drawerOpen = true;
    private bool session_loading = true;
    private bool IsOnline = true;
    private Store store = new Store();
    private string UserName;

    protected override async Task OnInitializedAsync()
    {
        var claims = await AuthStateProvider.GetAuthenticationStateAsync();
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        NavigationManager.LocationChanged += OnLocationChanged;

        UpdateBreadcrumbs();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var sl = await IUserService.SessionLogin();

            if (sl != null && AuthStateProvider is CustomAuthStateProvider customProvider)
            {
                customProvider.NotifyNotificationState(sl);
                await GetStore();
                session_loading = false;
            }
            else
            {
                session_loading = false;
            }

            IsOnline = await JSRuntime.InvokeAsync<bool>("networkStatus.isOnline");
            await JSRuntime.InvokeVoidAsync("networkStatus.registerConnectionEvents", DotNetObjectReference.Create(this));

            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetStore()
    {
        try
        {
            store = await HttpClientService.GetAsync<Store>("/api/store");
            await FormFactor.SetSession("StoreId", store.Id.ToString());
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void Logout()
    {
        if (AuthStateProvider is CustomAuthStateProvider externalAuthProvider)
        {
            externalAuthProvider.NotifyNotificationState(null);
        }

        NavigationManager.NavigateTo("login/index");
        session_loading = false;
        StateHasChanged();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateBreadcrumbs();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBreadcrumbs()
    {
        var segments = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "").Split('/', StringSplitOptions.RemoveEmptyEntries);
        var breadcrumbList = new List<BreadcrumbItem> { new("HOME", "/", icon: Icons.Material.Outlined.Home) };

        string path = "";
        foreach (var segment in segments)
        {
            path += $"/{segment}";
            breadcrumbList.Add(new BreadcrumbItem(segment.ToUpperInvariant(), null, false));
        }

        breadcrumbs = breadcrumbList;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            UserName = user.Identity.Name;
            string id = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            await GetStore();
        }
    }

    [JSInvokable]
    public Task UpdateConnectionStatus(bool status)
    {
        IsOnline = status;
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
