@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Localization
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<div style="display: flex; flex-direction: column; min-height: 100vh;">

    <MudLayout style="flex: 1; display: flex; flex-direction: column;">
        <AuthorizeView>
            <MudAppBar Style="background-color: #2196F3">
                <MudText> @($"STORE: ") @store?.StoreName </MudText>
                <MudSpacer />
                <MudBadge Color="@(IsOnline? Color.Success: Color.Error)" Overlap="true" Bordered="true">
                    <MudAvatar Elevation="2" Size="Size.Medium">
                        @UserName?[0]
                    </MudAvatar>
                </MudBadge>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="Logout" Color="Color.Inherit" />
            </MudAppBar>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <MudMainContent Style="flex: 1;">
                    <MudBreadcrumbs Items="@breadcrumbs"></MudBreadcrumbs>
                    <div style="padding: 8px;">
                        @Body
                    </div>
                </MudMainContent>
            </Authorized>
            <NotAuthorized>
                @if (!session_loading)
                {
                    <QuePOS.Shared.Pages.Login.Login />
                }
                else
                {
                    <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                        <MudProgressCircular Color="Color.Primary" Style="height: 70px; width: 70px;" Indeterminate="true" />
                    </div>
                }
            </NotAuthorized>
        </AuthorizeView>

        <!-- Sticky Footer -->
        <footer style="padding:16px; background-color:#f5f5f5; text-align:center;">
            <MudText Typo="Typo.body2" Align="Align.Center">© @DateTime.Now.Year Developed by Thima.</MudText>
        </footer>

    </MudLayout>

</div>

<MudDialog @bind-Visible="showOrderDlg" Options="_options">
    <TitleContent>New Order</TitleContent>
    <DialogContent>
        <MudText>Order ID: @order?.Id</MudText>

        <MudText>Items:</MudText>
        <ul>
            @foreach (var item in order.OrderItems)
            {
                <li>@item.Name - Quantity: @item.Quantity - Price: @item.Price.ToString("C")</li>
            }
        </ul>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="AcceptOrder" Color="Color.Primary">
            @if (isProcessing)
            {

                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Loading....</MudText>
            }
            else
            {
                <MudText>
                    Accept Order
                </MudText>
            }

        </MudButton>
        <MudButton OnClick="RejectOrder" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>



@code {
    //@inject IStringLocalizer<AppResources> Localizer
    private bool showOrderDlg = false;
    private DialogOptions _options = new DialogOptions() { FullWidth = true };
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IUserService IUserService { get; set; }
    [Inject] IFormFactor FormFactor { get; set; }
    [Inject] AuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IHttpClientService HttpClientService { get; set; }

    private List<BreadcrumbItem> breadcrumbs = new();
    private bool session_loading = true;
    private bool IsOnline = true;
    private Store store = new Store();
    private string UserName;
    private Order order = new();
    protected override async Task OnInitializedAsync()
    {
        var claims = await AuthStateProvider.GetAuthenticationStateAsync();
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        NavigationManager.LocationChanged += OnLocationChanged;

        UpdateBreadcrumbs();
        await base.OnInitializedAsync();
    }
    private bool isProcessing = false;
    private async Task AcceptOrder()
    {
        try
        {
            order.OrderStatus = OrderStatus.Accepted;
            var response = await HttpClientService.PutAsync<string>($"api/order/accept/{order.Id}", order);
            isProcessing = true;
            Snackbar.Add("Order accepted successfully!", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }
    private void RejectOrder()
    {
        // Logic to reject the order
        Snackbar.Add("Order rejected successfully!", Severity.Warning);
        //await hubConnection.SendAsync("RejectOrder", order.Id);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var sl = await IUserService.SessionLogin();

            if (sl != null && AuthStateProvider is CustomAuthStateProvider customProvider)
            {
                customProvider.NotifyNotificationState(sl);
                session_loading = false;
            }
            else
            {
                session_loading = false;
            }

            IsOnline = await JSRuntime.InvokeAsync<bool>("networkStatus.isOnline");
            await JSRuntime.InvokeVoidAsync("networkStatus.registerConnectionEvents", DotNetObjectReference.Create(this));

            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetStore()
    {
        try
        {
            store = await HttpClientService.GetAsync<Store>("/api/store");
            await FormFactor.SetSession("StoreId", store.Id.ToString());
            await OrderListener(store.Id);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void Logout()
    {
        if (AuthStateProvider is CustomAuthStateProvider externalAuthProvider)
        {
            externalAuthProvider.NotifyNotificationState(null);
        }

        NavigationManager.NavigateTo("login/index");
        session_loading = false;

        StateHasChanged();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateBreadcrumbs();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBreadcrumbs()
    {
        var segments = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "").Split('/', StringSplitOptions.RemoveEmptyEntries);
        var breadcrumbList = new List<BreadcrumbItem> { new("HOME", "/", icon: Icons.Material.Outlined.Home) };

        string path = "";
        foreach (var segment in segments)
        {
            path += $"/{segment}";
            breadcrumbList.Add(new BreadcrumbItem(segment.ToUpperInvariant(), null, true));
        }

        breadcrumbs = breadcrumbList;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            UserName = user.Identity.Name;
            string id = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            await GetStore();
        }
    }
    @inject IHttpClientFactory httpClientFactory;
    HubConnection hubConnection;
    private async Task OrderListener(Guid id)
    {
        try
        {
            var baseUrl = httpClientFactory.CreateClient("api").BaseAddress;

            // Ensure the hubConnection is not already connected
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.StopAsync();
                await hubConnection.DisposeAsync();
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{baseUrl}order")
                .WithAutomaticReconnect()
                .Build();

            // Subscribe to order event with dynamic id
            hubConnection.On<string>($"{id}", async (data) =>
            {
                try
                {

                    var parsedOrder = Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(data);

                    await InvokeAsync(() =>
                    {
                        order = parsedOrder;
                        showOrderDlg = true;
                        StateHasChanged();
                    });
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error: {ex.Message}", Severity.Success);
                }

            });

            await hubConnection.StartAsync();
            // Ensure the hubConnection is not already connected
            // if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            // {
            //     Snackbar.Add("Connected", Severity.Success);
            // }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Connection to SignalR hub failed: {ex.Message}", Severity.Info);
        }
    }


    [JSInvokable]
    public Task UpdateConnectionStatus(bool status)
    {
        IsOnline = status;
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
