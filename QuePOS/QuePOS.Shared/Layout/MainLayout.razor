@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@* Required *@
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <AuthorizeView>

        <MudAppBar>
            <MudText> @($"STORE: ") @store?.StoreName </MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="x=>SwitchView(-1)" Color="Color.Inherit" />
        </MudAppBar>
        <MudAppBar Bottom=true Elevation="4">
            <MudIconButton Icon="@Icons.Material.Filled.Dashboard" OnClick="x=>SwitchView(0)" Color="Color.Inherit" Edge="Edge.Start" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Inventory" OnClick="x=>SwitchView(1)" Color="Color.Inherit" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="x=>SwitchView(2)" Color="Color.Inherit" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" OnClick="x=>SwitchView(3)" Color="Color.Inherit" />
        </MudAppBar>

    </AuthorizeView>
    <AuthorizeView>
        <Authorized>

            <MudMainContent>
                <div style="margin: 20px">
                    @Body
                </div>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            @if (!session_loading)
            {
                <QuePOS.Shared.Pages.Login.Login />
            }
            else
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                    <MudProgressCircular Color="Color.Primary" Style="height: 70px; width: 70px;" Indeterminate="true" />
                </div>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>


@code {
    @inject AuthenticationStateProvider AuthStateProvider;
    @inject ISnackbar Snackbar;
    @inject IUserService IUserService;
    @inject IFormFactor FormFactor;
    @inject NavigationManager NavigationManager;

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private void SwitchView(int index)
    {
        switch (index)
        {
            case 0:
                NavigationManager.NavigateTo("/");
                break;
            case 1:
                NavigationManager.NavigateTo("products/index");
                break;
            case 2:
                NavigationManager.NavigateTo("products/index");
                break;
        }
    }
    private bool session_loading = true;
    // private List<NotificationModel> Notifications = [];
    protected override async Task OnInitializedAsync()
    {
        var claims = await AuthStateProvider.GetAuthenticationStateAsync();
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;


        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var sl = await IUserService.SessionLogin();

            if (sl != null)
            {
                if (AuthStateProvider is CustomAuthStateProvider customProvider)
                {
                    customProvider.NotifyNotificationState(sl);
                }

            }
            else
            {
                session_loading = false;
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private void Logout()
    {
        if (AuthStateProvider is CustomAuthStateProvider externalAuthProvider)
        {
            externalAuthProvider.NotifyNotificationState(null);
        }
        // NavigationManager.NavigateTo("login/index");
        session_loading = false;
        StateHasChanged();
        // await hubConnection.StopAsync();
    }
    string UserName;
    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            UserName = user.Identity.Name;
            string id = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            //SignalRListener(id);
            // NavigationManager.NavigateTo("/");
            await GetStore();
        }
        // StateHasChanged(); //
    }
    private Store store = new Store();
    [Inject]
    private IHttpClientService HttpClientService { get; set; }
    private async Task GetStore()
    {
        try
        {
            store = await HttpClientService.GetAsync<Store>("/api/store");
            await FormFactor.SetSession("StoreId", store.Id.ToString());

        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            //StateHasChanged();
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }
    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
    private void ToggleNotifications()
    {

    }
    private void MarkAllAsRead()
    {

    }

}
@*     void LogoutHandle()
    {
        NavigationManager.NavigateTo("login/index");
    } *@

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
